using System;
using System.Collections.Generic;
using System.Linq;
using tana_gh.UnityDotG.Editor;

namespace tana_gh.GalaxyInBottles.Editor
{
    [CodeGen]
    public class SandboxLifetimeScopeCodeGen
    {
        public static void Generate(CodeGenContext context)
        {
            context.AutoGeneratedFolder = UnityDotGConstants.autoGeneratedFolder;

            var settings = RoleAttributeUtil.GetAllTypesWithRole("Setting");
            var settingArrays = RoleAttributeUtil.GetAllTypesWithRole("SettingArray");
            var handlers = RoleAttributeUtil.GetAllTypesWithRole("Handler");
            var messages = RoleAttributeUtil.GetAllTypesWithRole("Message");
            foreach (var name in UnityDotGConstants.sceneNames)
            {
                GenerateOne(context, name, settings, settingArrays, handlers, messages);
            }
        }

        public static void GenerateOne
        (
            CodeGenContext context,
            string name,
            IEnumerable<Type> settings,
            IEnumerable<Type> settingArrays,
            IEnumerable<Type> handlers,
            IEnumerable<Type> messages
        )
        {
            

            
            context.AddCode($"{name}LifetimeScope.g.cs",
$@"
using UnityEngine;
using MessagePipe;
using VContainer;
using VContainer.Unity;

namespace tana_gh.GalaxyInBottles
{{
    public partial class {name}LifetimeScope
    {{{
        settings
        .Select(setting => $@"[SerializeField] private {setting.GetTypeName()} {setting.GetVarName()};")
        .ToLines(8)
    }{
        settingArrays
        .Select(settings => $@"[SerializeField] private {settings.GetTypeName()}[] {settings.GetArrayVarName()};")
        .ToLines(8)
    }
        protected override void Configure(IContainerBuilder builder)
        {{
            base.Configure(builder);
        {
            settings
            .Select(setting => $@"if ({setting.GetVarName()} != null) builder.RegisterInstance({setting.GetVarName()});")
            .ToLines(12)
        }{
            settingArrays
            .Select(settings => $@"if ({settings.GetArrayVarName()} != null) builder.RegisterInstance({settings.GetArrayVarName()});")
            .ToLines(12)
        }{
            handlers
            .Select(handler => $@"builder.Register<{handler.GetTypeName()}>(Lifetime.Scoped);")
            .ToLines(12)
        }{
            (messages.Any() ? new string[] { $@"var options = builder.RegisterMessagePipe();" } : Enumerable.Empty<string>())
            .Concat(
                messages
                .Select(message => $@"builder.RegisterMessageBroker<{message.GetTypeName()}>(options);")
            )
            .ToLines(12)
        }
            builder.RegisterEntryPoint<{name}EntryPoint>();
        }}
    }}
}}
"
            );
        }
    }
}
