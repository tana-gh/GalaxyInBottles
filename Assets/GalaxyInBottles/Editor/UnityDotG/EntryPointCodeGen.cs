using System;
using System.Linq;
using tana_gh.UnityDotG.Editor;

namespace tana_gh.GalaxyInBottles.Editor
{
    [CodeGen]
    public class EntryPointCodeGen
    {
        public static void Generate(CodeGenContext context)
        {
            context.AutoGeneratedFolder = UnityDotGConstants.AutoGeneratedFolder;

            foreach (var sceneKind in Enum.GetValues(typeof(SceneKind)).Cast<SceneKind>())
            {
                GenerateOne(context, sceneKind);
            }
        }

        public static void GenerateOne(CodeGenContext context, SceneKind sceneKind)
        {
            var settingStores = RoleAttributeUtil.GetAllTypesWithRole("SettingStore", sceneKind);
            var settingArrays = RoleAttributeUtil.GetAllTypesWithRole("SettingArray", sceneKind);
            var handlers = RoleAttributeUtil.GetAllTypesWithRole("Handler", sceneKind);

            context.AddCode($"{sceneKind}EntryPoint.g.cs",
$@"
using VContainer;

namespace tana_gh.GalaxyInBottles
{{
    public partial class {sceneKind}EntryPoint
    {{
        [Inject] private IObjectResolver Resolver {{ get; set; }}
        {
            settingStores
            .Select(settingStore => $@"[Inject] private {settingStore.GetTypeName()} {settingStore.GetSettingStoreVarName(true)} {{ get; set; }}")
            .ToLines(8)
        }{
            settingArrays
            .Select(settingArray => $@"[Inject] private {settingArray.GetTypeName()}[] {settingArray.GetArrayVarName(true)} {{ get; set; }}")
            .ToLines(8)
        }{
            handlers
            .Select(handler => $@"[Inject] private {handler.GetTypeName()} {handler.GetVarName(true)} {{ get; set; }}")
            .ToLines(8)
        }

        partial void Init()
        {{{
            settingStores.Join
            (
                settingArrays,
                settingStore => settingStore.GetGenericArguments()[0],
                settingArray => settingArray,
                (settingStore, settingArray) =>
                    $@"if ({settingArray.GetArrayVarName(true)} != null) {settingStore.GetSettingStoreVarName(true)}?.Init({settingArray.GetArrayVarName(true)});"
            )
            .ToLines(12)
        }{
            handlers
            .Select(handler => $@"{handler.GetVarName(true)}?.Init();")
            .ToLines(12)
        }
        }}
    }}
}}
"
            );
        }
    }
}
